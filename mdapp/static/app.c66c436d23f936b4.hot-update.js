"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdatemd_ui"]("app",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/HelloWorld.vue?vue&type=script&lang=js&":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/HelloWorld.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ImageThumb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ImageThumb */ \"./src/components/ImageThumb.vue\");\n/* harmony import */ var _FileDragDrop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FileDragDrop */ \"./src/components/FileDragDrop.vue\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  components: {\n    ImageThumb: _ImageThumb__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    FileDragDrop: _FileDragDrop__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n  },\n  data: () => ({\n    possible_modes: ['Text -> Image', 'List -> Image', 'Image -> Image'],\n    current_mode: 2,\n    panels_model: [],\n    alert: false,\n    alertMessage: \"Warning, generated images contained some not safe for work content and have been replaced.\",\n    prompt: \"product photo, beautiful vase, zen garden, still life, photoreal, bokeh, depth of field, calming\",\n    image_history: [],\n    files: [],\n    image_id: '',\n    selected_image_id: '',\n    selected_image_saved: false,\n    init_image_type: 'none',\n    init_image_id: 0,\n    init_image_name: 'none',\n    promptA: \"product photo, beautiful vase, zen garden, still life, photoreal, bokeh, depth of field, calming\",\n    promptB: \"renaissance painting, beautiful vase, zen garden, still life, photoreal, bokeh, depth of field, calming\",\n    prompt_blend: 0.5,\n    seed: 42,\n    width: {\n      label: 'width',\n      val: 512,\n      color: 'blue lighten-1'\n    },\n    height: {\n      label: 'height',\n      val: 512,\n      color: 'blue lighten-1'\n    },\n    scale: {\n      label: 'scale',\n      val: 7,\n      color: 'blue lighten-1'\n    },\n    steps: {\n      label: 'steps',\n      val: 25,\n      color: 'blue lighten-1'\n    },\n    init_strength: 0.5,\n    num_of_images: 1\n  }),\n\n  mounted() {\n    window.addEventListener(\"resize\", this.onWindowResize);\n    const loadHistoryOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: ''\n      })\n    };\n    fetch(this.api_server + '/load_history/', loadHistoryOptions).then(response => response.json()).then(data => {\n      if (data.result == 'OK') {\n        data.prompts.forEach(prompt => {\n          this.image_history.push({\n            prompt_id: prompt.prompt_id,\n            settings: {\n              seed: prompt.seed,\n              width: prompt.width,\n              height: prompt.height,\n              scale: prompt.scale,\n              steps: prompt.steps,\n              prompt: prompt.prompt,\n              prompt_id: prompt.prompt_id,\n              saved: prompt.saved,\n              status: prompt.status,\n              mode: prompt.mode,\n              init_image_id: prompt.init_image_id,\n              init_image_name: prompt.init_image_name,\n              init_strength: prompt.init_strength\n            }\n          });\n        });\n      }\n    });\n  },\n\n  destroyed() {\n    window.removeEventListener(\"resize\", this.onWindowResize);\n  },\n\n  watch: {},\n  methods: {\n    file_added(f) {\n      this.files = [f];\n    },\n\n    time_estimate(width, height, steps) {\n      const per_s = 22000.0 / (768 * 768) / 50.0;\n      const per_w = 22000 / (50 * per_s) / (768 * 768);\n      const total_ms = per_w * width * (per_w * height) * (per_s * steps);\n      return total_ms * 1.2;\n    },\n\n    show_image(settings, url) {\n      this.seed = settings.seed;\n      this.width.val = settings.width;\n      this.height.val = settings.height;\n      this.steps.val = settings.steps;\n      this.scale.val = settings.scale;\n      this.selected_image_id = settings.prompt_id;\n      this.selected_image_saved = settings.saved;\n      this.current_mode = settings.mode;\n\n      if (settings.mode == '1') {\n        this.promptA = settings.prompt[0].text;\n        this.promptB = settings.prompt[1].text;\n        this.prompt_blend = settings.prompt[1].weight;\n      } else if (settings.mode == '2') {\n        this.prompt = settings.prompt;\n        this.init_strength = settings.init_strength;\n      } else {\n        this.prompt = settings.prompt;\n      }\n\n      var display_image = document.getElementById('display_image');\n\n      if (display_image != null) {\n        display_image.setAttribute('src', url);\n        this.onWindowResize();\n      } else {\n        document.querySelector('#imgcontainer').innerHTML = '';\n        let img = document.createElement('img');\n        img.id = \"display_image\";\n        var downloadingImage = new Image();\n\n        downloadingImage.onload = function () {\n          img.src = url;\n        };\n\n        downloadingImage.src = url;\n        document.querySelector('#imgcontainer').appendChild(img);\n        this.onWindowResize();\n      }\n    },\n\n    textarea_keypress() {\n      this.onGenerate();\n    },\n\n    onSave() {\n      const saveOptions = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt_id: this.selected_image_id\n        })\n      };\n      fetch(this.api_server + '/save_prompt/', saveOptions).then(response => response.json()).then(data => {\n        if (data.result == 'OK') {\n          var i = 0;\n\n          for (i; i < this.image_history.length; i++) {\n            if (this.selected_image_id == this.image_history[i].prompt_id) {\n              this.image_history[i].settings.saved = true;\n              break;\n            }\n          }\n\n          this.selected_image_saved = true;\n        } else if (data.result == \"ERR\") {\n          this.warning(data.message);\n        }\n      });\n    },\n\n    onDelete() {\n      const deleteOptions = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt_id: this.selected_image_id\n        })\n      };\n      fetch(this.api_server + '/delete_prompt/', deleteOptions).then(response => response.json()).then(data => {\n        if (data.result == 'OK') {\n          var i = 0;\n          var found = false;\n\n          for (i; i < this.image_history.length; i++) {\n            if (this.selected_image_id == this.image_history[i].prompt_id) {\n              found = true;\n              break;\n            }\n          }\n\n          if (found) {\n            this.image_history.splice(i, 1);\n\n            if (i > 0 && this.image_history.length > 0) {\n              this.selected_image_id = this.image_history[i - 1].prompt_id;\n              this.selected_image_saved = this.image_history[i - 1].settings.saved;\n              var display_image = document.getElementById('display_image');\n              display_image.setAttribute('src', this.api_server + \"/download_prompt/?prompt_id=\" + this.image_history[i - 1].prompt_id);\n              this.onWindowResize();\n            } else {\n              this.selected_image_id = '';\n              this.selected_image_saved = false;\n            }\n          }\n        } else if (data.result == \"ERR\") {\n          this.warning(data.message);\n        }\n      });\n    },\n\n    onExplore() {\n      this.seed = Math.floor(Math.random() * 10000000);\n      this.onGenerate();\n    },\n\n    onGenerate() {\n      for (var i = 0; i < this.num_of_images; i++) {\n        const seed_number = this.seed + i + i * Math.floor(Math.random() * 100000);\n        const prompt_value = this.current_mode == 1 ? [{\n          text: this.promptA,\n          weight: 1.0 - this.prompt_blend\n        }, {\n          text: this.promptB,\n          weight: this.prompt_blend\n        }] : this.prompt;\n\n        if (this.current_mode == 2) {\n          const formData = new FormData();\n          formData.append('init_image', this.files[0], this.files[0].name);\n          formData.append('data', JSON.stringify({\n            prompt: prompt_value,\n            w: this.width.val,\n            h: this.height.val,\n            scale: this.scale.val,\n            steps: this.steps.val,\n            seed: seed_number,\n            init_strength: this.init_strength,\n            mode: this.current_mode\n          }));\n          fetch(this.api_server + '/submit_prompt/', {\n            method: \"POST\",\n            body: formData\n          }).then(response => response.json()).then(data => {\n            if (data.result == \"OK\") {\n              this.image_history.push({\n                prompt_id: data.prompt_id,\n                settings: {\n                  seed: seed_number,\n                  width: this.width.val,\n                  height: this.height.val,\n                  scale: this.scale.val,\n                  steps: this.steps.val,\n                  prompt: prompt_value,\n                  saved: false,\n                  mode: this.current_mode,\n                  init_strength: this.init_strength,\n                  init_image_id: data.init_image_id,\n                  init_image_name: data.init_image_name,\n                  status: 0,\n                  prompt_id: data.prompt_id,\n                  gen_time: this.time_estimate(this.width.val, this.height.val, this.steps.val)\n                }\n              });\n            } else if (data.result == \"ERR\") {\n              this.warning(data.message);\n            }\n\n            console.log(data);\n          });\n        } else {\n          fetch(this.api_server + '/submit_prompt/', {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              prompt: prompt_value,\n              w: this.width.val,\n              h: this.height.val,\n              scale: this.scale.val,\n              steps: this.steps.val,\n              seed: seed_number,\n              mode: this.current_mode,\n              files: this.files\n            })\n          }).then(response => response.json()).then(data => {\n            if (data.result == \"OK\") {\n              this.image_history.push({\n                prompt_id: data.prompt_id,\n                settings: {\n                  seed: seed_number,\n                  width: this.width.val,\n                  height: this.height.val,\n                  scale: this.scale.val,\n                  steps: this.steps.val,\n                  prompt: prompt_value,\n                  saved: false,\n                  mode: this.current_mode,\n                  status: 0,\n                  prompt_id: data.prompt_id,\n                  gen_time: this.time_estimate(this.width.val, this.height.val, this.steps.val)\n                }\n              });\n            } else if (data.result == \"ERR\") {\n              this.warning(data.message);\n            }\n\n            console.log(data);\n          });\n        }\n      }\n\n      this.num_of_images = 1;\n    },\n\n    onWindowResize() {\n      var container = document.querySelector('#imgcontainer');\n      var image_container = document.querySelector('#main');\n      var width = image_container.offsetWidth;\n      var height = window.innerHeight - 135;\n\n      if (this.current_mode == 1) {\n        height = window.innerHeight - 135;\n      }\n\n      container.style.width = width + \"px\";\n      container.style.height = height + \"px\";\n    },\n\n    warning(text) {\n      this.alertMessage = text;\n      this.alert = true;\n      window.setTimeout(() => {\n        this.alert = false;\n        console.log(\"hide alert after 3 seconds\");\n      }, 3000);\n    }\n\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/HelloWorld.vue?vue&type=script&lang=js&\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "c71813d28f759aa6"; }
/******/ }();
/******/ 
/******/ }
);